from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from fastapi import HTTPException

from src.workflows.content_workflow import create_content_workflow
from src.agents.core.content_strategy import ContentStrategyAgent
from src.agents.core.content_writer import ContentWriterAgent
from src.agents.specialists.social_media import (
    TwitterAgent, 
    InstagramAgent, 
    FacebookAgent, 
    TikTokAgent, 
    BlogWriterAgent
)
from src.database import manager as db_manager
from src.database.manager import init_db, add_campaign_and_ideas, add_draft, get_full_history

# Create the FastAPI app instance
app = FastAPI(
    title="Marketing Agents System API",
    description="An API to interact with a system of AI-powered marketing agents.",
    version="0.1.0"
)

# --- Middleware ---
# Allow all origins for simplicity in local development
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# --- Database & Workflow Initialization ---
@app.on_event("startup")
def on_startup():
    """This function runs when the application starts."""
    init_db()

# --- Agent Initialization ---
content_strategy_agent = ContentStrategyAgent()
content_writer_agent = ContentWriterAgent()

# Initialize specialist agents in a dictionary for easy lookup
specialist_agents = {
    "twitter": TwitterAgent(),
    "instagram": InstagramAgent(),
    "facebook": FacebookAgent(),
    "tiktok": TikTokAgent(),
    "blog": BlogWriterAgent(),
}

# Create the content generation workflow
content_workflow = create_content_workflow()

# --- Static Files ---
# Mount the 'static' directory to serve HTML, CSS, JS files
app.mount("/static", StaticFiles(directory="static"), name="static")


# --- API Models ---
class TopicRequest(BaseModel):
    topic: str

class DraftRequest(BaseModel):
    topic: str
    idea_id: int
    idea_text: str # We still need the text for the agent's prompt

class SpecializeDraftPayload(BaseModel):
    draft_id: int
    draft_text: str
    platform: str # 'twitter' or 'instagram'

# --- API Endpoints ---
@app.get("/", response_class=FileResponse, include_in_schema=False)
async def read_root():
    return 'static/index.html'

@app.get("/history", response_class=FileResponse, include_in_schema=False)
async def read_history():
    return 'static/history.html'

@app.post("/generate-ideas", summary="Generate Content Ideas", description="Triggers the content strategy workflow to generate ideas for a given topic.")
def generate_ideas(request: TopicRequest):
    """
    Accepts a topic and returns content ideas generated by the AI agent.
    """
    print(f"--- Received request to generate ideas for topic: '{request.topic}' ---")
    
    inputs = {"topic": request.topic}
    final_state = content_workflow.invoke(inputs)
    generated_ideas = final_state.get('ideas')
    
    # Save the results to the database and get the ideas with their new IDs
    created_ideas_with_ids = []
    if generated_ideas:
        created_ideas_with_ids = add_campaign_and_ideas(request.topic, generated_ideas)
    
    print(f"--- Workflow finished. Final state: ---")
    print(final_state)
    
    # Return the ideas with their IDs to the frontend
    return {"topic": request.topic, "generated_ideas": created_ideas_with_ids}


@app.post("/generate-draft", summary="Generate Content Draft", description="Triggers the content writer agent to generate a draft for a selected idea.")
def generate_draft(request: DraftRequest):
    """
    Accepts a topic and a selected idea, then returns a content draft.
    """
    print(f"--- Received request to generate draft for idea: '{request.idea_id}' ---")
    
    # For this simple, single-step action, we can invoke the agent directly
    # without a complex workflow.
    writer_agent = ContentWriterAgent()
    
    # The agent needs the text of the idea to generate a relevant draft
    state = {"topic": request.topic, "selected_idea": request.idea_text} 
    
    result = writer_agent.invoke(state)
    generated_draft = result.get('draft')

    # Save the draft to the database and get its new ID
    new_draft_id = db_manager.add_draft(idea_id=request.idea_id, draft_text=result["draft"])

    # Return the draft text and the new ID
    return {"draft": result["draft"], "draft_id": new_draft_id}


@app.post("/specialize-draft")
async def specialize_draft_endpoint(payload: SpecializeDraftPayload):
    """Takes a draft and adapts it for a specific social media platform."""
    # Select the appropriate agent from the dictionary
    agent = specialist_agents.get(payload.platform.lower())
    
    if not agent:
        raise HTTPException(status_code=400, detail=f"Platform '{payload.platform}' not supported.")

    # The state for the specialist agent is the original draft
    state = {"draft": payload.draft_text}
    result = agent.invoke(state)
    specialized_text = result["specialized_draft"]

    # Save the specialized draft to the database
    db_manager.add_specialized_draft(
        original_draft_id=payload.draft_id,
        platform=payload.platform,
        specialized_text=specialized_text
    )

    return {"specialized_draft": specialized_text}


@app.get("/api/history", summary="Get Full History", description="Retrieves the complete history of all campaigns, ideas, and drafts.")
def get_history():
    """
    Returns a structured list of all campaigns and their associated content.
    """
    history_data = get_full_history()
    return history_data

# To run this app:
# 1. Make sure you are in the root directory of the project (e.g., 'c:\Users\...\malakies')
# 2. Activate the virtual environment: .venv\Scripts\activate
# 3. Run the server: uvicorn src.main:app --reload
